public class CadastroDeLivros {

	public static void main(String[] args) {
		
		
		
		
		/**
		 * Instanciação do objeto da classe livro
		 */
		Autor autor = new Autor();
		autor.setNome("Rodrigo Turini");
		autor.setEmail("rodrigo.turini@caelum.com.br");
		autor.setCpf("123.456.789-10");
		
		Livro livro = new LivroFisico(autor);
		livro.setNome("Java 8 Prático");
		livro.setDescricao("Novos rescursos da linguagem");
		livro.setValor(59.90);
		livro.setIsbn("978-85-66250-46-6");
		
		/**
		 * Aqui mostra que o livro pertence a este autor instanciado no objeto
		 * Então o livro é atribuido (sett) ao autor.
		 */
		livro.mostrarDetalhes();
	===============================================================================================================	
/**
 * Ebook(subclasse) esta herdando tudo que esta na classe Livro (superclasse).
 * Regra: Somente pode gerdader diretamente de uma classe pai
 * Ou seja, somente a classe que esta extendendo.
 * @author Casa
 *
 */
public class Ebook extends Livro implements Promocional{
	
	private String waterMark;
	
	/**
	 *  Podemos marcar métodos reescritos com uma anotação @Override.
	 * Isto ajuda o compilador validar que esse métodos é realmente uma reescrita.
	 */
	@Override
	public boolean aplicaDesconto(double porcentagem) {
		if (porcentagem > 0.15) {
			return false;
		}
		double desconto = this.getValor() + porcentagem;
		this.setValor(this.getValor() - desconto);
		return true;
	}

	/**
	 * super é para delegar a responsabilidade para a superclasse que tem comportamento bem definido
	 * @param autor
	 */
	public Ebook(Autor autor) {
		super(autor);
	}
	
 	===============================================================================================================
	
/**
 * Colocamos o Livro como classe abstrata. Somente vira abstrata quando planeja
 * a hieraquia e herança da sua classe.
 * 
 * Pode ser bastrata sem nenhum método abstrato. Apos tornar abstrata, nenhum código poderá mais instanciá-la.
 * Ao declarar um método abstrato, precisa tornar a classe abstrata também.
 * Pode ter métodos abstratos ou não (concretos)
 * Toda classe filha(subclasse) precisa implementar os métodos abstratos da classe pai (superclasse). A não ser que seja abstrata
 * 
 * @author Casa
 *
 */
public abstract class Livro implements Produto{

	/**
	 * PAGINA 71 Recebem o nome de atributos, por irem no escopo da classe. ISBN (um
	 * numero de identificação, International Standard Book Number.
	 * 
	 * Visibilidade dos atributos foi alterada de padrão para private Ninguém mais
	 * além da própria classe conseguirá acessar e modificar este valor
	 * 
	 * set (atribuir) atribuir valores para o get (pegar) retornar ou pegar estes
	 * valores
	 */
	private String nome;
	private String descricao;
	private double valor;
	private String isbn;

	/**
	 * Pode-se adicionar na classe um atributo criado. Uma classe pode ter outra
	 * classe como atributo, processo chamado de composição.
	 */
	private Autor Autor;

	public Livro(Autor autor) {
		this.Autor = autor;
		this.isbn = "000-00-00000-00-0";
	}

	public Livro() {
	}

	boolean temAutor() {
		return this.Autor != null;
	}

	/**
	 * Método que define um comportamento para a classe Não se retorna nada, apenas
	 * executando instruções do método. Void é uma palavra resrvada indica que o
	 * método não tem retorno.
	 */
	void mostrarDetalhes() {
		System.out.println("Mostrando detalhes do livro");
		System.out.println("Nome: " + nome);
		System.out.println("Descrição: " + descricao);
		System.out.println("Valor: " + valor);
		System.out.println("ISBN: " + isbn);

		System.out.println("\n");

		if (this.temAutor()) {
			Autor.mostrarDetalhes();
		}
		System.out.println("--");
	}

	/**
	 * Usarmos a palavra this para mostra que é um atributo da classe this evita
	 * problemas de ambiguidade e deixa claro que faz parte desta classe
	 */
	public boolean aplicaDesconto(double porcentagem) {
		return false;
	}
	
 	===============================================================================================================
 	
	/**
	* Interface pode ter método concretos. As implementações não são obrigadas a ser reescritas.
	* Este recurso é chamado de default method
	* Método defaults foram adicionados para permitir que interfaces evoluam sem quebra o código existente
	*/
	
	
	public interface Promocional {
	
		boolean aplicaDesconto(double porcentagem);
		
		default boolean aplucaDescontoDe10Porcento() {
			return aplicaDesconto(0.01);
		}
	}
	
	 ===============================================================================================================
	 	
	/**
	*  Serve para que ela não seja apenas um único método abstrado.
	* Pode ter um ou mais default methods declarados na interface, mas apenas são considerados métodos abstratos
	*/
	
	@FunctionalInterface
	public interface Promocional {
		
		boolean aplicaDesconto(double porcentagem);
		
		default boolean aplucaDescontoDe10Porcento() {
			return aplicaDesconto(0.01);
		}
		
	 ===============================================================================================================

	/**
	* Uma classe ou método para ter acesso de outro pacote, eles precisam ter a visibilidade public.
	* Uma classe pública pode ser acessada por qualquer outra classe no mesmo projeto. O mesmo vale para atributor, métodos e construtores 
	
	* O private, modificador de acesso que torna classes, atributos, métodos ou construtores visíveis apenas para a própria classe.
	* para o encapsulamento, sempre deixe seus atributos private.
	
	* O default (quando não há modificador algum)
	* Somente pode ter acesso classes do mesmo pacote podem ter acesso aos atributos, construtores, métodos ou classes com a ausëncia de um modificador de acesso.
	
	* O modificador e ultimo é o protected que ficará visível para a propria classe, para suas classes filhas e também pra quem estiver no mesmo pacote.
	* Classes também não podem utilizar esses modificador de acesso.
	*/
	
	 ===============================================================================================================
	 
						REPRESENTAÇÃO DE MODIFICADORES DE ACESSO E SUAS VISIBILIDADES
						
	 ===============================================================================================================
			
	- public 
		+ projeto
		+ subclasses
		+ pacote
		+ classes
	- protected
		+ subclasses
		+ pacote
		+ classes
	- default
		+ pacote
		+ classes
	- private
		+ classes
		
	 ===============================================================================================================
		
	/**
	* Array é um objeto, então antes de qualquer coisa precisamos instanciá-lo.
	*
	*
	*/
	private Produto[] produtos = new Produto[10];